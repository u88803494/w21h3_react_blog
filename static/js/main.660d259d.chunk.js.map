{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Nav","page","onClick","className","About","Blog","allPost","data","map","item","key","id","title","post","body","this","props","console","log","React","Component","App","handleChangePage","setState","handleGetPost","state","fetch","then","res","json","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+OAGMA,G,MAAM,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAAT,OACV,yBAAKC,UAAU,OACb,oCACA,wBACEA,UAAS,qBAAyB,UAATF,GAAoB,UAC7CC,QAAS,kBAAMA,EAAQ,WAFzB,gBAMA,wBACEC,UAAS,qBAAyB,UAATF,GAAoB,UAC7CC,QAAS,kBAAMA,EAAQ,WAFzB,yBASEE,EAAQ,kBACZ,yBAAKD,UAAU,SACb,wBAAIA,UAAU,gBAAd,kFACA,yBAAKA,UAAU,kBAAf,ssCAWEE,E,2MACJC,QAAU,gBAAGC,EAAH,EAAGA,KAAML,EAAT,EAASA,QAAT,OACRK,EAAKC,KAAI,SAAAC,GAAI,OACX,wBACEN,UAAU,cACVO,IAAKD,EAAKE,GACVT,QAAS,kBAAMA,EAAQO,EAAKE,MAE3BF,EAAKG,W,EAKZC,KAAO,SAACN,EAAMN,GAAP,OACL,yBAAKE,UAAU,cACb,wBAAIA,UAAU,eAAeI,EAAKN,EAAO,GAAGW,OAC5C,6BACA,yBAAKT,UAAU,iBAAiBI,EAAKN,EAAO,GAAGa,Q,wEAIzC,IAAD,EACgBC,KAAKC,MAApBT,EADD,EACCA,KAAMN,EADP,EACOA,KAEd,OADAgB,QAAQC,IAAIjB,GAEV,yBAAKE,UAAU,QAAf,iCAEE,yBAAKA,UAAU,eACH,UAATF,EACGc,KAAKT,QAAQS,KAAKC,OAASD,KAAKF,KAAKN,EAAMN,S,GA7BtCkB,IAAMC,WAgFVC,E,YA3Cb,WAAYL,GAAQ,IAAD,8BACjB,4CAAMA,KAiBRM,iBAAmB,SAACrB,GAClB,EAAKsB,SAAS,CACZtB,UApBe,EAwBnBuB,cAAgB,SAACb,GACf,EAAKY,SAAS,CACZtB,KAAMU,KAxBR,EAAKc,MAAQ,CACXlB,KAAM,GACNN,KAAM,SAJS,E,iFAQE,IAAD,OAClByB,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACpB,GACL,EAAKgB,SAAS,CACZhB,c,+BAiBE,IAAD,EACgBQ,KAAKU,MAApBxB,EADD,EACCA,KAAMM,EADP,EACOA,KACd,OACE,yBAAKJ,UAAU,OACb,kBAAC,EAAD,CAAKF,KAAMA,EAAMC,QAASa,KAAKO,mBAErB,UAATrB,EAAmB,kBAAC,EAAD,MAChB,kBAAC,EAAD,CAAMM,KAAMA,EAAML,QAASa,KAAKS,cAAevB,KAAMA,S,GAtC/CkB,IAAMC,WC3DJU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMd,MAAK,SAAAe,GACjCA,EAAaC,iB","file":"static/js/main.660d259d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst Nav = ({ page, onClick }) => (\n  <nav className=\"nav\">\n    <h1>BlOG</h1>\n    <h3\n      className={`nav__index ${page === 'index' && 'active'}`}\n      onClick={() => onClick('index')}\n    >\n      首頁\n    </h3>\n    <h3\n      className={`nav__about ${page === 'about' && 'active'}`}\n      onClick={() => onClick('about')}\n    >\n      關於我\n    </h3>\n  </nav>\n);\n\nconst About = () => (\n  <div className=\"about\">\n    <h2 className=\"about__title\">老師好我是網頁設計課的同學</h2>\n    <dvi className=\"about__content\">\n      不不不，坐墊，諸位，不會吧，我們終於到了耶，這裡交給我們，別擔心，儘管如此，簡單又不花錢，Keroro，\n      快趁現在，警察大人，才拼命研究的！\n\n      請允許我，ㄟ那就結婚吧我沒有妳會死，前世的五百次回眸，但我可以肯定地告訴你，請允許我，我誰都不要，\n      ㄟ那就結婚吧我沒有妳會死，ㄟ那就結婚吧我沒有妳會死，但我可以肯定地告訴你，我誰都不要，什麼都別說了，\n      我誰都不要，請允許我，現在我不敢肯定，現在我不敢肯定，我們一輩子都來談戀愛吧！\n    </dvi>\n  </div>\n);\n\nclass Blog extends React.Component {\n  allPost = ({ data, onClick }) => (\n    data.map(item => (\n      <ul\n        className=\"blog__title\"\n        key={item.id}\n        onClick={() => onClick(item.id)}\n      >\n        {item.title}\n      </ul>\n    ))\n  )\n\n  post = (data, page) => (\n    <div className=\"blog__post\">\n      <ul className=\"blog__title\">{data[page - 1].title}</ul>\n      <hr />\n      <div className=\"blog__article\">{data[page - 1].body}</div>\n    </div>\n  )\n\n  render() {\n    const { data, page } = this.props;\n    console.log(page)\n    return (\n      <div className=\"blog\">\n        部落格文章\n        <div className=\"blog__posts\">\n          {page === 'index'\n            ? this.allPost(this.props) : this.post(data, page)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      page: 'index',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({\n          data,\n        });\n      });\n  }\n\n  handleChangePage = (page) => {\n    this.setState({\n      page,\n    });\n  }\n\n  handleGetPost = (id) => {\n    this.setState({\n      page: id,\n    });\n  }\n\n  render() {\n    const { page, data } = this.state;\n    return (\n      <div className=\"App\">\n        <Nav page={page} onClick={this.handleChangePage} />\n        {/* 在這裡利用判斷看要顯示 blog 還是 about 的部分 */}\n        {page === 'about' ? <About />\n          : <Blog data={data} onClick={this.handleGetPost} page={page} />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}